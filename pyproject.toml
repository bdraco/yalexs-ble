[project]
name = "yalexs-ble"
version = "3.1.3"
description = "Bluetooth control of Yale and August locks"
authors = [{ name = "J. Nick Koston", email = "nick@koston.org" }]
license = "GPL-3.0-only"
readme = "README.md"
requires-python = ">=3.11"
dynamic = ["classifiers", "dependencies"]

[project.urls]
"Documentation" = "https://yalexs-ble.readthedocs.io"
"Repository" = "https://github.com/bdraco/yalexs-ble"
"Bug Tracker" = "https://github.com/bdraco/yalexs-ble/issues"
"Changelog" = "https://github.com/bdraco/yalexs-ble/blob/main/CHANGELOG.md"

[tool.poetry]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
]
packages = [
    { include = "yalexs_ble", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"

# Documentation Dependencies
bleak = ">=0.19.0"
bleak-retry-connector = ">=3.4.0"
async-timeout = {version = ">=3.0.0", python = "<3.11"}
cryptography = ">=38.0.0"
lru-dict = ">=1.1.4"
async-interrupt = ">=1.1.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4"
pytest-cov = "^6.2"
pytest-asyncio = "^1.1.0"

[tool.semantic_release]
branch = "main"
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/yalexs_ble/__init__.py:__version__"]
build_command = "pip install poetry && poetry build"

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=yalexs_ble --cov-report=term-missing:skip-covered"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
]

[tool.isort]
profile = "black"
known_first_party = ["yalexs_ble", "tests"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'docs/.*',
    'setup.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
ignore = [
    "S101", # use of assert
    "S104",  # S104 Possible binding to all interfaces
    "S305", # ECB mode is required for this protocol
    "PLR0912", # too many to fix right now
    "TID252", # skip
    "PLR0913", # too late to make changes here
    "PLR0911", # would be breaking change
    "TRY003", # too many to fix
    "SLF001", # design choice
    "PLR2004" , # too many to fix
    "PGH004",  # too many to fix
    "PGH003", # too many to fix
    "SIM110", # this is slower
    "PYI034", # enable when we drop Py3.10
    "PYI032", # breaks Cython
    "PYI041",  # breaks Cython
    "PERF401", # Cython: closures inside cpdef functions not yet supported
    "TRY400", # use logging.exception as is
    "ASYNC109", # timeout parameter is fine
    "TRY004", # ValueError is appropriate here
]
select = [
    "ASYNC", # async rules
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
    "FLY", # flynt
    "G", # flake8-logging-format   ,
    "PERF", # Perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-pathlib
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise    ,
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "T100", # Trace found: {name} used
    "T20", # flake8-print
    "TID", # Tidy imports
    "TRY", # tryceratops
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
    "SLF001",
    "PLR2004", # too many to fix right now
    "PT011", # too many to fix right now
    "PT006", # too many to fix right now
    "PGH003", # too many to fix right now
    "PT007", # too many to fix right now
    "PT027",  # too many to fix right now
    "PLW0603" , # too many to fix right now
    "PLR0915", # too many to fix right now
    "FLY002", # too many to fix right now
    "PT018", # too many to fix right now
    "PLR0124", # too many to fix right now
    "SIM202" , # too many to fix right now
    "PT012" , # too many to fix right now
    "TID252", # too many to fix right now
    "PLR0913", # skip this one
    "SIM102" , # too many to fix right now
    "SIM108", # too many to fix right now
    "T201", # too many to fix right now
    "PT004", # nice to have
]
"bench/**/*" = [
    "T201", # intended
]
"examples/**/*" = [
    "T201", # intended
]
"setup.py" = ["D100"]
"conftest.py" = ["D100"]
"docs/conf.py" = ["D100"]
